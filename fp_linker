#!/usr/bin/env python3

import argparse
import logging
from dataclasses import dataclass
from typing import Optional, ClassVar
import datetime
import os, sys
from pathlib import Path
import time
import subprocess

from watchdog.observers import Observer
from watchdog.events import LoggingEventHandler, FileSystemEventHandler


# Default source paths
FP_PATHS = [ Path("/var/lib/flatpak/exports/bin"),
             Path.home() / ".local/share/flatpak/exports/bin" ]


def die(msg: str) -> None:
    logger.error(msg)
    sys.exit(1)


class FPLinkerException(Exception): pass


class CustomFormatter(logging.Formatter):
    """Logging Formatter to add colors and count warning / errors"""

    format = "%(message)s"

    FORMATS = {
        logging.DEBUG: f"{format}",
        logging.INFO: f"{format}",
        logging.WARNING: f"{format}",
        logging.ERROR: f"{format}",
        logging.CRITICAL: f"{format}",
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)


class EventHandler(FileSystemEventHandler):
    def __init__(self, src_dirs: list[Path], link_dir: Path, prefix: str, postfix: str, to_lower: bool, t_notify_ms) -> None:
        super().__init__()
        self._src_dirs = src_dirs
        self._prefix = prefix
        self._postfix = postfix
        self._link_dir = link_dir
        self._to_lower = to_lower
        self._t_notify_ms = t_notify_ms

        # Keep track of installed apps
        self._known_apps = []

    def run_cmd(self, cmd: list[str], timeout: int=-1, user: Optional[str]=None, envs: Optional[dict[str,str]]=None, cwd: Optional[Path]=None, raise_on_err=True, shell: bool=False):
        # this fixes all sort of localisation issues like ',' for '.' in numbers
        env = os.environ.copy()
        env["LC_ALL"] = "C"

        if envs:
            for k,v in envs.items():
                env[k] = v

        if user:
            cmd = ["sudo", "-u", user] + cmd

        # raises FileNotFoundError if command is not found
        try:
            if timeout > 0:
                result = subprocess.run(cmd, capture_output=True, encoding="utf8", env=env, cwd=cwd, timeout=timeout, shell=shell)
            else:
                result = subprocess.run(cmd, capture_output=True, encoding="utf8", env=env, cwd=cwd, shell=shell)

        except subprocess.TimeoutExpired as e:
            raise FPLinkerException(e)
        except FileNotFoundError as e:
            raise FPLinkerException(e)

        # raises subprocess.CalledProcessError if exitcode is not 0
        try:
            result.check_returncode()
        except subprocess.CalledProcessError as e:
            print(result.stdout)
            print(result.stderr)
            if raise_on_err:
                raise FPLinkerException(e)

        return result

    def scan_dirs(self) -> list[Path]:
        return [f for d in self._src_dirs for f in d.iterdir() if d.is_dir()]

    def notify(self, summary: str, body: str):
        if self._t_notify_ms >= 0:
            try:
                self.run_cmd(["notify-send", "--app-name=fp_linker", f"--expire-time={self._t_notify_ms}",
                             f"--urgency=normal", f"fp_linker: {summary}", body])
            except FPLinkerException as e:
                logger.error(e)

    def check(self):
        """ Check for new and removed flatpaks """
        changed = False
        for f in self.scan_dirs():
            if f not in self._known_apps:
                name = f.name.split(".")[-1]
                if self._to_lower:
                    name = name.lower()

                link = self._link_dir / f"{self._prefix}{name}{self._postfix}"
                if link.is_symlink() and link.exists():
                    continue

                link.symlink_to(f)
                logger.info(f"Flatpak installed, linked: {link} -> {f}")
                self.notify("New flatpak installed", f"Linked: {name} -> {link.readlink().name}")
                changed = True

        # cleanup broken links
        for f in self._link_dir.iterdir():
            if f.is_symlink() and not f.exists():
                target = f.readlink()
                f.unlink()
                logger.info(f"Flatpak '{f.name}' is no longer installed, removing symlink")
                self.notify("Flatpak uninstalled", f"Unlinked: {f.name} -> {target.name}")
                changed = True

        self._known_apps = self.scan_dirs()
        return changed

    def on_any_event(self, event):
        #logger.info(f"[{event.event_type}]\t{event.src_path}")
        if event.event_type in ["created", "deleted"]:
            self.check()


class App():
    def __init__(self) -> None:
        pass

    def parse_args(self):
        parser = argparse.ArgumentParser(description='Create links for flatpak apps')

        parser.add_argument('-w', '--watch',    help="keep watching for new packages", action='store_true')
        parser.add_argument('-l', '--link-dir', help="directory where link is placed", required=True, type=Path)
        parser.add_argument('-s', '--src-dir',  help="directory containing flatpak binaries", action="append", type=Path, default=FP_PATHS)
        parser.add_argument('-p', '--prefix',   help="prefix link names with string", type=str, default="")
        parser.add_argument('-P', '--postfix',  help="postfix link names with string", type=str, default="")
        parser.add_argument('-L', '--to-lower', help="make link names lowercase only", action='store_true')
        parser.add_argument('-t', '--notify_ms',  help="duration of notification in sec (-1 to disable), default=10", type=int, default=10)
        parser.add_argument('-D', '--debug',    help="enable debugging", action='store_true')

        args = parser.parse_args()

        if args.debug:
            logger.setLevel(logging.DEBUG)
        else:
            logger.setLevel(logging.INFO)

        self._do_watch = args.watch
        self._link_dir = args.link_dir
        self._prefix = args.prefix
        self._postfix = args.postfix
        self._to_lower = args.to_lower
        if args.notify_ms < 0:
            self._t_notify_ms = -1
        else:
            self._t_notify_ms = args.notify_ms * 1000

        self._src_dirs = [ p.expanduser() for p in args.src_dir ]

        if not self._link_dir.is_dir():
            die(f"Directory doesn\'t exist, {self._link_dir}")

    def do_watch(self, event_handler: EventHandler):
        observer = Observer()
        observer.start()
        unscheduled = self._src_dirs[:]
        scheduled = {}

        # Keep watching directories, also if they don't exist yet
        try:
            while True:
                for p in unscheduled.copy():
                    if not p.is_dir():
                        continue
                    unscheduled.remove(p)
                    logger.info(f"Watch: {p}")
                    s = observer.schedule(event_handler, str(p), recursive=True)
                    scheduled[p] = s

                # Unschedule directories that do not exist anymore
                for d,s in scheduled.copy().items():
                    if not d.is_dir():
                        observer.unschedule(s)
                        unscheduled.append(d)
                        del scheduled[d]
                        logger.error(f"Directory is removed, {d}")
                time.sleep(5)
        except KeyboardInterrupt:
            observer.stop()
            observer.join()

    def run(self):
        self.parse_args()

        event_handler = EventHandler(self._src_dirs, self._link_dir, self._prefix, self._postfix, self._to_lower, self._t_notify_ms)

        if self._do_watch:
            event_handler.check()
            self.do_watch(event_handler)
        else:
            if not event_handler.check():
                logger.info("Nothing to do...")


logger = logging.getLogger("fp_linker")
ch = logging.StreamHandler()
ch.setFormatter(CustomFormatter())
logger.addHandler(ch)

if __name__ == "__main__":
    app = App()
    app.run()
